Week 1: Simple Methods
    Validation - Card class::validateName method, 
    Method Overloading - GameHandler class::makeChoice method,
    Constructor Chaining - Not used.
    Stringbuilder - ActivatableCard or EventCard or TokenCard or WeaponCard class::toString method,
    Regex - CardFactory class::generateDeck method,

Week 2: Inheritance, Polymorphism and Exception Handling.
    Inheritance - ActivatableCard or EventCard or TokenCard or WeaponCard class inherits Card class
    Polymorphism - GameHandler class:::drawCard method, if an instanceof EventCard.
    Exception Handling - DeckEmptyException exception and InvalidCardTypeException exception.
    
Week 3: Final Methods and Abstract Classes
    Final Method - MinecraftRogueLike class::printDeckDetails method,
    Abstract Class - abstract Card class is the parent of ActivatableCard, EventCard, TokenCard and WeaponCard class.
    
Week 4: Interfaces
    Interfaces - CardFormatter class::formatCard implemented by Card class
    
Week 5: Arrays, Collections, and Iterators
    Arrays - CardFactory class::generateDeck method, when I call the split method.
    Collections(List, Map, Set) - MinecraftRogueLike class for List<Card> deck and hand.
    Enhanced For Loop - ActivatableCard class::getObtainedCards method,
    Collections - Collections.sort(deck) method.
    Iterators - Not used.

Week 6: Generics and Nested Class.
    Generics Methods - GameHandler final Class<? extends Card> type.
    Nested Classes - JavaFXManager because it uses the Singleton design pattern.
    
Week 7: Functional Interfaces, Lambdas and Method References.
    Functional Interfaces - Not used.
    Lambdas - MinecraftRogueLike class::printHandDetails, when it uses card -> card.toString();
    Method References - GameHandler class, type::isInstance

Week 8: Files, Paths and Streaming
    Paths - CardFactory to look for the cardData.txt file
    Files - CardFactory to look for the cardData.txt file
    Scanner - Main class for user input.
    Streaming - GameHandler to stream through the deck list.
    Random - Not used, as I used Collections.shuffle instead.

Week 9: GUIs
    JavaFX - In JavaFXManager.
    Threading - In JavaFXManager
    
Week 10: Unit Testing
    Unit Testing - MinecraftRogueLikeTest

Week 11: Design Patterns
    Singleton - JavaFXManager class.
    Factory - CardFactory class.
    Abstract Factory - CardFactory class
    Command - CardCommand class, CardInvoker, WeaponCommand class. It does all the actions for the Bow and EnchantedNetheriteSword.
    Decorator - Not used.
    Observer - Not used.

Week 12: Concurrency
    Thread - In JavaFXManager
    Timer/TimerTask - Not used.
    Executor - MinecraftRogueLike class executorService = Executors.newSingleThreadExecutor();
    Future Task - futureDeck = executorService.submit(CardFactory::generateDeck);
    Parallel Task - Not used.